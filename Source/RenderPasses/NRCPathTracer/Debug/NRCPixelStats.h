#pragma once
#include "Falcor.h"
#include "NRCPixelStatsShared.slang"
#include "Utils/Algorithm/ComputeParallelReduction.h"

namespace Falcor
{
    /** Helper class for collecting runtime stats in the path tracer.

        Per-pixel stats are logged in buffers on the GPU, which are immediately ready for consumption
        after end() is called. These stats are summarized in a reduction pass, which are
        available in getStats() or printStats() after async readback to the CPU.
    */
    class NRCPixelStats
    {
    public:
        struct Stats
        {
            float    avgInferencePathLength = 0.f;
            float    avgSuffixPathLength = 0.f;

            pybind11::dict toPython() const;
        };

        using SharedPtr = std::shared_ptr<NRCPixelStats>;
        virtual ~NRCPixelStats() = default;

        static SharedPtr create();

        void setEnabled(bool enabled) { mEnabled = enabled; }
        bool isEnabled() const { return mEnabled; }

        void beginFrame(RenderContext* pRenderContext, const uint2& frameDim);
        void endFrame(RenderContext* pRenderContext);

        void prepareProgram(const ref<Program>& pProgram, const ShaderVar& var);

        void renderUI(Gui::Widgets& widget);

        /** Fetches the latest stats generated by begin()/end().
            \param[out] stats The stats are copied here.
            \return True if stats are available, false otherwise.
        */
        bool getStats(NRCPixelStats::Stats& stats);

        const ref<Texture> getInferencePathLength() const;
        const ref<Texture> getSuffixPathLength() const;

    protected:
        NRCPixelStats();
        void copyStatsToCPU();

        // Internal state
        ref<ComputeParallelReduction> mpParallelReduction;            ///< Helper for parallel reduction on the GPU.
        ref < Buffer> mpReductionResult;         ///< Results buffer for stats readback (CPU mappable).
        ref <GpuFence>               mpFence;                        ///< GPU fence for sychronizing readback.

        // Configuration
        bool                                mEnabled = false;               ///< Enable pixel statistics.
        bool                                mEnableLogging = false;         ///< Enable printing to logfile.

        // Runtime data
        bool                                mRunning = false;               ///< True inbetween begin() / end() calls.
        bool                                mWaitingForData = false;        ///< True if we are waiting for data to become available on the GPU.
        uint2                               mFrameDim = { 0, 0 };           ///< Frame dimensions at last call to begin().

        bool                                mStatsValid = false;            ///< True if stats have been read back and are valid.
        bool                                mRayCountTextureValid = false;  ///< True if total ray count texture is valid.
        Stats                               mStats;                         ///< Traversal stats.

        ref < Texture> mpStatsInferencePathLength; ///< Buffer for per-pixel inference path
        ref < Texture> mpStatsSuffixPathLength; ///< Buffer for 

        bool                                mStatsBuffersValid = false;     ///< True if per-pixel stats buffers contain valid data.

    };
}
